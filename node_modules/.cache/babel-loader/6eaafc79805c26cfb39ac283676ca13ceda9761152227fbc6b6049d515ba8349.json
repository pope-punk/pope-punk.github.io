{"ast":null,"code":"// Matrix utility functions for hexagonal church pew arrangements\n// Define canonical reset state - all pews on outer ring\nexport const CANONICAL_STATE=[[0,0,0],// innermost ring\n[0,0,0],// middle ring\n[2,2,2]// outermost ring\n];// Validate a matrix configuration\nexport const isValidMatrix=matrix=>{if(!matrix||!Array.isArray(matrix)||matrix.length!==3)return false;// Check each row is valid\nfor(let r=0;r<3;r++){if(!Array.isArray(matrix[r])||matrix[r].length!==3)return false;for(let d=0;d<3;d++){if(matrix[r][d]!==0&&matrix[r][d]!==2)return false;}}// Count total pews\nconst totalPews=matrix.flat().reduce((sum,val)=>sum+val,0);if(totalPews!==6)return false;// Check innermost ring constraint (at most one pair)\nconst innerRingTotal=matrix[0].reduce((sum,val)=>sum+val,0);if(innerRingTotal>2)return false;return true;};// Calculate transition steps between two matrices\nexport const calculateTransition=(startMatrix,endMatrix)=>{if(!isValidMatrix(startMatrix)||!isValidMatrix(endMatrix)){return[];}const steps=[];// Step 1: Save the initial state\nsteps.push({matrix:JSON.parse(JSON.stringify(startMatrix)),description:\"Initial arrangement\"});// Step 2: Transition to canonical state (all pews on outer ring)\nconst toCanonicalSteps=transitionToCanonical(startMatrix);steps.push(...toCanonicalSteps);// Step 3: Transition from canonical to target state\nconst fromCanonicalSteps=transitionFromCanonical(CANONICAL_STATE,endMatrix);steps.push(...fromCanonicalSteps);return steps;};// Helper to move pews to canonical state (all on outer ring)\nconst transitionToCanonical=matrix=>{const steps=[];const currentMatrix=JSON.parse(JSON.stringify(matrix));// Move pews from inner ring to middle ring\nfor(let d=0;d<3;d++){if(currentMatrix[0][d]===2){currentMatrix[0][d]=0;currentMatrix[1][d]=2;steps.push({matrix:JSON.parse(JSON.stringify(currentMatrix)),description:`Move pew from inner ring to middle ring at diagonal ${d}`});}}// Move pews from middle ring to outer ring\nfor(let d=0;d<3;d++){if(currentMatrix[1][d]===2){currentMatrix[1][d]=0;currentMatrix[2][d]=2;steps.push({matrix:JSON.parse(JSON.stringify(currentMatrix)),description:`Move pew from middle ring to outer ring at diagonal ${d}`});}}// Make sure outer ring has all 3 pairs\nlet missingDiagonals=[];for(let d=0;d<3;d++){if(currentMatrix[2][d]!==2){missingDiagonals.push(d);}}// Redistribute outer ring pews if needed\nif(missingDiagonals.length>0){let extraDiagonals=[];for(let d=0;d<3;d++){if(currentMatrix[2][d]>2){extraDiagonals.push(d);}}for(let i=0;i<Math.min(missingDiagonals.length,extraDiagonals.length);i++){currentMatrix[2][extraDiagonals[i]]-=2;currentMatrix[2][missingDiagonals[i]]=2;steps.push({matrix:JSON.parse(JSON.stringify(currentMatrix)),description:`Rotate pew on outer ring from diagonal ${extraDiagonals[i]} to diagonal ${missingDiagonals[i]}`});}}// If we reached canonical state, add a step\nif(JSON.stringify(currentMatrix)===JSON.stringify(CANONICAL_STATE)){steps.push({matrix:JSON.parse(JSON.stringify(CANONICAL_STATE)),description:\"Reached canonical arrangement (all pews on outer ring)\"});}return steps;};// Helper to move from canonical state to target state\nconst transitionFromCanonical=(canonicalMatrix,targetMatrix)=>{const steps=[];const currentMatrix=JSON.parse(JSON.stringify(canonicalMatrix));// Move pews from outer ring to middle ring\nfor(let d=0;d<3;d++){if(targetMatrix[1][d]===2&&currentMatrix[1][d]!==2){currentMatrix[2][d]=0;currentMatrix[1][d]=2;steps.push({matrix:JSON.parse(JSON.stringify(currentMatrix)),description:`Move pew from outer ring to middle ring at diagonal ${d}`});}}// Move pews from middle ring to inner ring\nfor(let d=0;d<3;d++){if(targetMatrix[0][d]===2&&currentMatrix[0][d]!==2){currentMatrix[1][d]=0;currentMatrix[0][d]=2;steps.push({matrix:JSON.parse(JSON.stringify(currentMatrix)),description:`Move pew from middle ring to inner ring at diagonal ${d}`});}}// Add a final step showing the target arrangement\nif(JSON.stringify(currentMatrix)!==JSON.stringify(targetMatrix)){steps.push({matrix:JSON.parse(JSON.stringify(targetMatrix)),description:\"Final arrangement reached\"});}return steps;};// Get a descriptive name for each position in the matrix\nexport const getPositionName=(ring,diagonal)=>{const ringNames=[\"Inner\",\"Middle\",\"Outer\"];const diagonalNames=[\"Horizontal\",\"Top-Right to Bottom-Left\",\"Top-Left to Bottom-Right\"];return`${ringNames[ring]} Ring, ${diagonalNames[diagonal]} Diagonal`;};// Generate a default matrix with positions\nexport const generateDefaultMatrix=()=>{return JSON.parse(JSON.stringify(CANONICAL_STATE));};","map":{"version":3,"names":["CANONICAL_STATE","isValidMatrix","matrix","Array","isArray","length","r","d","totalPews","flat","reduce","sum","val","innerRingTotal","calculateTransition","startMatrix","endMatrix","steps","push","JSON","parse","stringify","description","toCanonicalSteps","transitionToCanonical","fromCanonicalSteps","transitionFromCanonical","currentMatrix","missingDiagonals","extraDiagonals","i","Math","min","canonicalMatrix","targetMatrix","getPositionName","ring","diagonal","ringNames","diagonalNames","generateDefaultMatrix"],"sources":["C:/ApplicationDev/pope-punk.github.io/src/utils/matrixUtils.js"],"sourcesContent":["// Matrix utility functions for hexagonal church pew arrangements\r\n\r\n// Define canonical reset state - all pews on outer ring\r\nexport const CANONICAL_STATE = [\r\n  [0, 0, 0], // innermost ring\r\n  [0, 0, 0], // middle ring\r\n  [2, 2, 2]  // outermost ring\r\n];\r\n\r\n// Validate a matrix configuration\r\nexport const isValidMatrix = (matrix) => {\r\n  if (!matrix || !Array.isArray(matrix) || matrix.length !== 3) return false;\r\n  \r\n  // Check each row is valid\r\n  for (let r = 0; r < 3; r++) {\r\n    if (!Array.isArray(matrix[r]) || matrix[r].length !== 3) return false;\r\n    for (let d = 0; d < 3; d++) {\r\n      if (matrix[r][d] !== 0 && matrix[r][d] !== 2) return false;\r\n    }\r\n  }\r\n  \r\n  // Count total pews\r\n  const totalPews = matrix.flat().reduce((sum, val) => sum + val, 0);\r\n  if (totalPews !== 6) return false;\r\n  \r\n  // Check innermost ring constraint (at most one pair)\r\n  const innerRingTotal = matrix[0].reduce((sum, val) => sum + val, 0);\r\n  if (innerRingTotal > 2) return false;\r\n  \r\n  return true;\r\n};\r\n\r\n// Calculate transition steps between two matrices\r\nexport const calculateTransition = (startMatrix, endMatrix) => {\r\n  if (!isValidMatrix(startMatrix) || !isValidMatrix(endMatrix)) {\r\n    return [];\r\n  }\r\n  \r\n  const steps = [];\r\n  \r\n  // Step 1: Save the initial state\r\n  steps.push({\r\n    matrix: JSON.parse(JSON.stringify(startMatrix)),\r\n    description: \"Initial arrangement\"\r\n  });\r\n  \r\n  // Step 2: Transition to canonical state (all pews on outer ring)\r\n  const toCanonicalSteps = transitionToCanonical(startMatrix);\r\n  steps.push(...toCanonicalSteps);\r\n  \r\n  // Step 3: Transition from canonical to target state\r\n  const fromCanonicalSteps = transitionFromCanonical(CANONICAL_STATE, endMatrix);\r\n  steps.push(...fromCanonicalSteps);\r\n  \r\n  return steps;\r\n};\r\n\r\n// Helper to move pews to canonical state (all on outer ring)\r\nconst transitionToCanonical = (matrix) => {\r\n  const steps = [];\r\n  const currentMatrix = JSON.parse(JSON.stringify(matrix));\r\n  \r\n  // Move pews from inner ring to middle ring\r\n  for (let d = 0; d < 3; d++) {\r\n    if (currentMatrix[0][d] === 2) {\r\n      currentMatrix[0][d] = 0;\r\n      currentMatrix[1][d] = 2;\r\n      steps.push({\r\n        matrix: JSON.parse(JSON.stringify(currentMatrix)),\r\n        description: `Move pew from inner ring to middle ring at diagonal ${d}`\r\n      });\r\n    }\r\n  }\r\n  \r\n  // Move pews from middle ring to outer ring\r\n  for (let d = 0; d < 3; d++) {\r\n    if (currentMatrix[1][d] === 2) {\r\n      currentMatrix[1][d] = 0;\r\n      currentMatrix[2][d] = 2;\r\n      steps.push({\r\n        matrix: JSON.parse(JSON.stringify(currentMatrix)),\r\n        description: `Move pew from middle ring to outer ring at diagonal ${d}`\r\n      });\r\n    }\r\n  }\r\n  \r\n  // Make sure outer ring has all 3 pairs\r\n  let missingDiagonals = [];\r\n  for (let d = 0; d < 3; d++) {\r\n    if (currentMatrix[2][d] !== 2) {\r\n      missingDiagonals.push(d);\r\n    }\r\n  }\r\n  \r\n  // Redistribute outer ring pews if needed\r\n  if (missingDiagonals.length > 0) {\r\n    let extraDiagonals = [];\r\n    for (let d = 0; d < 3; d++) {\r\n      if (currentMatrix[2][d] > 2) {\r\n        extraDiagonals.push(d);\r\n      }\r\n    }\r\n    \r\n    for (let i = 0; i < Math.min(missingDiagonals.length, extraDiagonals.length); i++) {\r\n      currentMatrix[2][extraDiagonals[i]] -= 2;\r\n      currentMatrix[2][missingDiagonals[i]] = 2;\r\n      steps.push({\r\n        matrix: JSON.parse(JSON.stringify(currentMatrix)),\r\n        description: `Rotate pew on outer ring from diagonal ${extraDiagonals[i]} to diagonal ${missingDiagonals[i]}`\r\n      });\r\n    }\r\n  }\r\n  \r\n  // If we reached canonical state, add a step\r\n  if (JSON.stringify(currentMatrix) === JSON.stringify(CANONICAL_STATE)) {\r\n    steps.push({\r\n      matrix: JSON.parse(JSON.stringify(CANONICAL_STATE)),\r\n      description: \"Reached canonical arrangement (all pews on outer ring)\"\r\n    });\r\n  }\r\n  \r\n  return steps;\r\n};\r\n\r\n// Helper to move from canonical state to target state\r\nconst transitionFromCanonical = (canonicalMatrix, targetMatrix) => {\r\n  const steps = [];\r\n  const currentMatrix = JSON.parse(JSON.stringify(canonicalMatrix));\r\n  \r\n  // Move pews from outer ring to middle ring\r\n  for (let d = 0; d < 3; d++) {\r\n    if (targetMatrix[1][d] === 2 && currentMatrix[1][d] !== 2) {\r\n      currentMatrix[2][d] = 0;\r\n      currentMatrix[1][d] = 2;\r\n      steps.push({\r\n        matrix: JSON.parse(JSON.stringify(currentMatrix)),\r\n        description: `Move pew from outer ring to middle ring at diagonal ${d}`\r\n      });\r\n    }\r\n  }\r\n  \r\n  // Move pews from middle ring to inner ring\r\n  for (let d = 0; d < 3; d++) {\r\n    if (targetMatrix[0][d] === 2 && currentMatrix[0][d] !== 2) {\r\n      currentMatrix[1][d] = 0;\r\n      currentMatrix[0][d] = 2;\r\n      steps.push({\r\n        matrix: JSON.parse(JSON.stringify(currentMatrix)),\r\n        description: `Move pew from middle ring to inner ring at diagonal ${d}`\r\n      });\r\n    }\r\n  }\r\n  \r\n  // Add a final step showing the target arrangement\r\n  if (JSON.stringify(currentMatrix) !== JSON.stringify(targetMatrix)) {\r\n    steps.push({\r\n      matrix: JSON.parse(JSON.stringify(targetMatrix)),\r\n      description: \"Final arrangement reached\"\r\n    });\r\n  }\r\n  \r\n  return steps;\r\n};\r\n\r\n// Get a descriptive name for each position in the matrix\r\nexport const getPositionName = (ring, diagonal) => {\r\n  const ringNames = [\"Inner\", \"Middle\", \"Outer\"];\r\n  const diagonalNames = [\"Horizontal\", \"Top-Right to Bottom-Left\", \"Top-Left to Bottom-Right\"];\r\n  \r\n  return `${ringNames[ring]} Ring, ${diagonalNames[diagonal]} Diagonal`;\r\n};\r\n\r\n// Generate a default matrix with positions\r\nexport const generateDefaultMatrix = () => {\r\n  return JSON.parse(JSON.stringify(CANONICAL_STATE));\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}