{"ast":null,"code":"var _jsxFileName = \"C:\\\\ApplicationDev\\\\pope-punk.github.io\\\\src\\\\components\\\\HexagonalChurch.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, forwardRef, useCallback, useRef } from 'react';\n// We'll import custom assets defined in the app\nimport defaultPewImage from '../assets/pew-icon.png';\nimport defaultChurchBackground from '../assets/church-background.png';\n\n// --- Constants for Drawing ---\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HEXAGON_LINE_COLOR = '#444';\nconst HEXAGON_LINE_WIDTH = 3;\nconst GUIDE_LINE_COLOR = '#888';\nconst GUIDE_LINE_WIDTH = 1;\n// Pew Size\nconst PEW_DISPLAY_WIDTH = 100;\nconst PEW_DISPLAY_HEIGHT = 100;\n// Animation timing\nconst ANIMATION_DURATION = 2500; // ms\n\n// --- Helper Functions ---\n\n// Draws the main hexagon outline\nconst drawHexagonalOutline = (ctx, width, height, hexSize, centerX, centerY) => {\n  const hexPoints = [];\n  ctx.beginPath();\n  for (let i = 0; i < 6; i++) {\n    const angle = Math.PI / 3 * i;\n    const x = centerX + hexSize * Math.cos(angle);\n    const y = centerY + hexSize * Math.sin(angle);\n    hexPoints.push({\n      x,\n      y\n    });\n    if (i === 0) ctx.moveTo(x, y);else ctx.lineTo(x, y);\n  }\n  ctx.closePath();\n  ctx.strokeStyle = HEXAGON_LINE_COLOR;\n  ctx.lineWidth = HEXAGON_LINE_WIDTH;\n  ctx.stroke();\n  return hexPoints;\n};\n\n// Draws the background (clipped)\nconst drawBackground = (ctx, width, height, backgroundImage, hexPoints) => {\n  ctx.save();\n  ctx.beginPath();\n  hexPoints.forEach((point, i) => {\n    if (i === 0) ctx.moveTo(point.x, point.y);else ctx.lineTo(point.x, point.y);\n  });\n  ctx.closePath();\n  ctx.clip();\n  if (backgroundImage && backgroundImage.complete && backgroundImage.naturalHeight !== 0) {\n    try {\n      const imgRatio = backgroundImage.naturalWidth / backgroundImage.naturalHeight;\n      const canvasRatio = width / height;\n      let drawWidth, drawHeight, drawX, drawY;\n      if (imgRatio > canvasRatio) {\n        drawHeight = height;\n        drawWidth = imgRatio * drawHeight;\n        drawX = (width - drawWidth) / 2;\n        drawY = 0;\n      } else {\n        drawWidth = width;\n        drawHeight = drawWidth / imgRatio;\n        drawX = 0;\n        drawY = (height - drawHeight) / 2;\n      }\n      ctx.drawImage(backgroundImage, drawX, drawY, drawWidth, drawHeight);\n    } catch (e) {\n      ctx.fillStyle = '#BCBCBC';\n      ctx.fillRect(0, 0, width, height);\n    }\n  } else {\n    ctx.fillStyle = '#BCBCBC';\n    ctx.fillRect(0, 0, width, height);\n  }\n  ctx.restore();\n};\n\n// Draws the concentric rings and diagonal guides\nconst drawGuides = (ctx, width, height, hexSize, centerX, centerY) => {\n  const ringRadii = [hexSize * 0.3, hexSize * 0.6, hexSize * 0.85];\n  ctx.strokeStyle = GUIDE_LINE_COLOR;\n  ctx.lineWidth = GUIDE_LINE_WIDTH;\n  // Rings\n  ringRadii.forEach(radius => {\n    ctx.beginPath();\n    ctx.arc(centerX, centerY, radius, 0, Math.PI * 2);\n    ctx.stroke();\n  });\n  // Diagonals - use standard angles: 0, 60, 120 degrees\n  const diagonalAngles = [0, Math.PI / 3, 2 * Math.PI / 3];\n  diagonalAngles.forEach(angle => {\n    const startX = centerX + hexSize * Math.cos(angle);\n    const startY = centerY + hexSize * Math.sin(angle);\n    const endX = centerX - hexSize * Math.cos(angle);\n    const endY = centerY - hexSize * Math.sin(angle);\n    ctx.beginPath();\n    ctx.moveTo(startX, startY);\n    ctx.lineTo(endX, endY);\n    ctx.stroke();\n  });\n  // Center point\n  ctx.beginPath();\n  ctx.arc(centerX, centerY, 3, 0, Math.PI * 2);\n  ctx.fillStyle = GUIDE_LINE_COLOR;\n  ctx.fill();\n  return ringRadii; // Return adjusted radii\n};\n\n// Fallback shape if image fails\nconst drawFallbackPew = ctx => {\n  ctx.beginPath();\n  ctx.arc(0, 0, 3, 0, Math.PI * 2);\n  ctx.fillStyle = 'red';\n  ctx.fill();\n};\n\n// Draw pews based on matrix\nconst drawPews = (ctx, matrix, pewImgObject, width, height, hexSize, centerX, centerY, ringRadii) => {\n  if (!matrix) return;\n  const imageToDraw = pewImgObject && pewImgObject.complete && pewImgObject.naturalHeight !== 0 ? pewImgObject : null;\n\n  // Define the base angles for diagonals\n  const diagonalBaseAngles = [0, Math.PI / 3, 2 * Math.PI / 3];\n\n  // Convert matrix to pew placement\n  const pewPositions = [];\n  for (let r = 0; r < 3; r++) {\n    for (let d = 0; d < 3; d++) {\n      if (matrix[r][d] === 2) {\n        // Add symmetric pair\n        pewPositions.push([r, d, 0]);\n        pewPositions.push([r, d, 1]);\n      }\n    }\n  }\n  pewPositions.forEach(pew => {\n    const [ringIndex, diagonalIndex, side] = pew;\n\n    // 1. Get Base Angle for the diagonal\n    const baseAngle = diagonalBaseAngles[diagonalIndex];\n\n    // 2. Determine Specific Pew Angle based on 'side'\n    const pewAngle = baseAngle + (side === 0 ? 0 : Math.PI);\n\n    // 3. Get Radius for the ring\n    const radius = ringRadii[ringIndex];\n\n    // 4. Calculate Coordinates\n    const x = centerX + radius * Math.cos(pewAngle);\n    const y = centerY + radius * Math.sin(pewAngle);\n\n    // 5. Translate origin to the pew's location\n    ctx.save();\n    ctx.translate(x, y);\n\n    // 6. Calculate Orientation Angle (perpendicular to the diagonal)\n    const orientationAngle = pewAngle + Math.PI / 2;\n\n    // 7. Rotate context\n    ctx.rotate(orientationAngle);\n\n    // 8. Draw Image (or fallback)\n    if (imageToDraw) {\n      try {\n        const imgAspect = imageToDraw.naturalWidth / imageToDraw.naturalHeight;\n        let dWidth = PEW_DISPLAY_WIDTH;\n        let dHeight = dWidth / imgAspect;\n        if (dHeight > PEW_DISPLAY_HEIGHT) {\n          dHeight = PEW_DISPLAY_HEIGHT;\n          dWidth = dHeight * imgAspect;\n        }\n        // Align top/narrow edge midpoint with origin\n        const dx = -dWidth / 2;\n        const dy = 0;\n        ctx.drawImage(imageToDraw, dx, dy, dWidth, dHeight);\n      } catch (e) {\n        drawFallbackPew(ctx);\n      }\n    } else {\n      drawFallbackPew(ctx);\n    }\n\n    // 9. Restore context\n    ctx.restore();\n  });\n};\n\n// Interpolate between matrices for smooth animation\nconst interpolateMatrix = (startMatrix, endMatrix, progress) => {\n  // Create an interpolated matrix where 0 = not present, 1 = fading in/out, 2 = fully present\n  const result = [[0, 0, 0], [0, 0, 0], [0, 0, 0]];\n  for (let r = 0; r < 3; r++) {\n    for (let d = 0; d < 3; d++) {\n      // If both have pews, keep it at 2\n      if (startMatrix[r][d] === 2 && endMatrix[r][d] === 2) {\n        result[r][d] = 2;\n      }\n      // If start has pew but end doesn't, fade out\n      else if (startMatrix[r][d] === 2 && endMatrix[r][d] === 0) {\n        result[r][d] = progress < 0.5 ? 2 : 0;\n      }\n      // If end has pew but start doesn't, fade in\n      else if (startMatrix[r][d] === 0 && endMatrix[r][d] === 2) {\n        result[r][d] = progress > 0.5 ? 2 : 0;\n      }\n    }\n  }\n  return result;\n};\n\n// --- Main Component ---\nconst HexagonalChurch = /*#__PURE__*/_s(/*#__PURE__*/forwardRef(_c = _s(({\n  matrix,\n  animationSteps,\n  customImages\n}, ref) => {\n  var _animationSteps$curre;\n  _s();\n  // State\n  const [bgImg, setBgImg] = useState(null);\n  const [pewImg, setPewImg] = useState(null);\n  const [currentStepIndex, setCurrentStepIndex] = useState(0);\n  const [animationProgress, setAnimationProgress] = useState(1); // 0 to 1\n  const [animationActive, setAnimationActive] = useState(false);\n  const [interpolatedMatrix, setInterpolatedMatrix] = useState(matrix);\n  const animationRef = useRef(null);\n\n  // Image Loading\n  useEffect(() => {\n    const img = new Image();\n    img.onload = () => {\n      setBgImg(img);\n    };\n    img.onerror = e => {\n      console.error(\"BG Image Load Error:\", e);\n      setBgImg(null);\n    };\n    img.src = (customImages === null || customImages === void 0 ? void 0 : customImages.hexagonBackground) || defaultChurchBackground;\n    return () => {\n      img.onload = null;\n      img.onerror = null;\n    };\n  }, [customImages === null || customImages === void 0 ? void 0 : customImages.hexagonBackground]);\n  useEffect(() => {\n    const img = new Image();\n    img.onload = () => {\n      setPewImg(img);\n    };\n    img.onerror = e => {\n      console.error(\"Pew Image Load Error:\", e);\n      setPewImg(null);\n    };\n    img.src = (customImages === null || customImages === void 0 ? void 0 : customImages.buttonIcon) || defaultPewImage;\n    return () => {\n      img.onload = null;\n      img.onerror = null;\n    };\n  }, [customImages === null || customImages === void 0 ? void 0 : customImages.buttonIcon]);\n\n  // Animation processing\n  useEffect(() => {\n    // If we have new animation steps, start animation\n    if (animationSteps && animationSteps.length > 1) {\n      setCurrentStepIndex(0);\n      setAnimationProgress(0);\n      setAnimationActive(true);\n    }\n  }, [animationSteps]);\n\n  // Animation frame handler\n  useEffect(() => {\n    if (!animationActive || !animationSteps || animationSteps.length <= 1) return;\n    let startTime;\n    const step = timestamp => {\n      if (!startTime) startTime = timestamp;\n      const elapsed = timestamp - startTime;\n      const progress = Math.min(elapsed / ANIMATION_DURATION, 1);\n      setAnimationProgress(progress);\n      if (progress < 1) {\n        animationRef.current = requestAnimationFrame(step);\n      } else {\n        // Move to next step or finish animation\n        if (currentStepIndex < animationSteps.length - 1) {\n          setCurrentStepIndex(prev => prev + 1);\n          setAnimationProgress(0);\n          startTime = null;\n          animationRef.current = requestAnimationFrame(step);\n        } else {\n          setAnimationActive(false);\n        }\n      }\n    };\n    animationRef.current = requestAnimationFrame(step);\n    return () => {\n      if (animationRef.current) {\n        cancelAnimationFrame(animationRef.current);\n      }\n    };\n  }, [animationActive, currentStepIndex, animationSteps]);\n\n  // Update interpolated matrix during animation\n  useEffect(() => {\n    if (!animationActive || !animationSteps || animationSteps.length <= 1) {\n      setInterpolatedMatrix(matrix);\n      return;\n    }\n    const currentStep = animationSteps[currentStepIndex];\n    const nextStep = animationSteps[Math.min(currentStepIndex + 1, animationSteps.length - 1)];\n    if (currentStep && nextStep) {\n      setInterpolatedMatrix(interpolateMatrix(currentStep.matrix, nextStep.matrix, animationProgress));\n    }\n  }, [animationActive, currentStepIndex, animationProgress, animationSteps, matrix]);\n\n  // Drawing function\n  const drawCanvas = useCallback(() => {\n    const canvas = ref === null || ref === void 0 ? void 0 : ref.current;\n    if (!canvas) return;\n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n    const {\n      width,\n      height\n    } = canvas;\n    const centerX = width / 2;\n    const centerY = height / 2;\n    const hexSize = Math.min(width, height) * 0.45;\n    ctx.clearRect(0, 0, width, height);\n\n    // Draw everything\n    const hexPoints = drawHexagonalOutline(ctx, width, height, hexSize, centerX, centerY);\n    drawBackground(ctx, width, height, bgImg, hexPoints);\n    drawHexagonalOutline(ctx, width, height, hexSize, centerX, centerY); // Outline on top\n    const ringRadii = drawGuides(ctx, width, height, hexSize, centerX, centerY);\n\n    // Draw pews with current matrix or animation interpolation\n    const matrixToRender = animationActive ? interpolatedMatrix : matrix;\n    drawPews(ctx, matrixToRender, pewImg, width, height, hexSize, centerX, centerY, ringRadii);\n  }, [ref, matrix, bgImg, pewImg, animationActive, interpolatedMatrix]);\n\n  // Effect to trigger drawing\n  useEffect(() => {\n    drawCanvas();\n  }, [drawCanvas]);\n\n  // Render\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"church-visualization\",\n    children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: ref,\n      width: 600,\n      height: 600,\n      className: \"church-canvas\",\n      \"aria-label\": \"Hexagonal church layout\",\n      role: \"img\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 321,\n      columnNumber: 13\n    }, this), animationActive && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"animation-status\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"step-description\",\n        children: ((_animationSteps$curre = animationSteps[currentStepIndex]) === null || _animationSteps$curre === void 0 ? void 0 : _animationSteps$curre.description) || \"Transformation in progress...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 331,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 330,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 320,\n    columnNumber: 9\n  }, this);\n}, \"8PrTOoIAbAsqXMvjGRl38q86dZ8=\")), \"8PrTOoIAbAsqXMvjGRl38q86dZ8=\");\n_c2 = HexagonalChurch;\nHexagonalChurch.displayName = 'HexagonalChurch';\nexport default HexagonalChurch;\nvar _c, _c2;\n$RefreshReg$(_c, \"HexagonalChurch$forwardRef\");\n$RefreshReg$(_c2, \"HexagonalChurch\");","map":{"version":3,"names":["React","useEffect","useState","forwardRef","useCallback","useRef","defaultPewImage","defaultChurchBackground","jsxDEV","_jsxDEV","HEXAGON_LINE_COLOR","HEXAGON_LINE_WIDTH","GUIDE_LINE_COLOR","GUIDE_LINE_WIDTH","PEW_DISPLAY_WIDTH","PEW_DISPLAY_HEIGHT","ANIMATION_DURATION","drawHexagonalOutline","ctx","width","height","hexSize","centerX","centerY","hexPoints","beginPath","i","angle","Math","PI","x","cos","y","sin","push","moveTo","lineTo","closePath","strokeStyle","lineWidth","stroke","drawBackground","backgroundImage","save","forEach","point","clip","complete","naturalHeight","imgRatio","naturalWidth","canvasRatio","drawWidth","drawHeight","drawX","drawY","drawImage","e","fillStyle","fillRect","restore","drawGuides","ringRadii","radius","arc","diagonalAngles","startX","startY","endX","endY","fill","drawFallbackPew","drawPews","matrix","pewImgObject","imageToDraw","diagonalBaseAngles","pewPositions","r","d","pew","ringIndex","diagonalIndex","side","baseAngle","pewAngle","translate","orientationAngle","rotate","imgAspect","dWidth","dHeight","dx","dy","interpolateMatrix","startMatrix","endMatrix","progress","result","HexagonalChurch","_s","_c","animationSteps","customImages","ref","_animationSteps$curre","bgImg","setBgImg","pewImg","setPewImg","currentStepIndex","setCurrentStepIndex","animationProgress","setAnimationProgress","animationActive","setAnimationActive","interpolatedMatrix","setInterpolatedMatrix","animationRef","img","Image","onload","onerror","console","error","src","hexagonBackground","buttonIcon","length","startTime","step","timestamp","elapsed","min","current","requestAnimationFrame","prev","cancelAnimationFrame","currentStep","nextStep","drawCanvas","canvas","getContext","clearRect","matrixToRender","className","children","role","fileName","_jsxFileName","lineNumber","columnNumber","description","_c2","displayName","$RefreshReg$"],"sources":["C:/ApplicationDev/pope-punk.github.io/src/components/HexagonalChurch.jsx"],"sourcesContent":["import React, { useEffect, useState, forwardRef, useCallback, useRef} from 'react';\r\n// We'll import custom assets defined in the app\r\nimport defaultPewImage from '../assets/pew-icon.png';\r\nimport defaultChurchBackground from '../assets/church-background.png';\r\n\r\n// --- Constants for Drawing ---\r\nconst HEXAGON_LINE_COLOR = '#444';\r\nconst HEXAGON_LINE_WIDTH = 3;\r\nconst GUIDE_LINE_COLOR = '#888';\r\nconst GUIDE_LINE_WIDTH = 1;\r\n// Pew Size\r\nconst PEW_DISPLAY_WIDTH = 100;\r\nconst PEW_DISPLAY_HEIGHT = 100;\r\n// Animation timing\r\nconst ANIMATION_DURATION = 2500; // ms\r\n\r\n// --- Helper Functions ---\r\n\r\n// Draws the main hexagon outline\r\nconst drawHexagonalOutline = (ctx, width, height, hexSize, centerX, centerY) => {\r\n    const hexPoints = [];\r\n    ctx.beginPath();\r\n    for (let i = 0; i < 6; i++) {\r\n        const angle = (Math.PI / 3) * i;\r\n        const x = centerX + hexSize * Math.cos(angle);\r\n        const y = centerY + hexSize * Math.sin(angle);\r\n        hexPoints.push({ x, y });\r\n        if (i === 0) ctx.moveTo(x, y);\r\n        else ctx.lineTo(x, y);\r\n    }\r\n    ctx.closePath();\r\n    ctx.strokeStyle = HEXAGON_LINE_COLOR;\r\n    ctx.lineWidth = HEXAGON_LINE_WIDTH;\r\n    ctx.stroke();\r\n    return hexPoints;\r\n};\r\n\r\n// Draws the background (clipped)\r\nconst drawBackground = (ctx, width, height, backgroundImage, hexPoints) => {\r\n    ctx.save();\r\n    ctx.beginPath();\r\n    hexPoints.forEach((point, i) => {\r\n        if (i === 0) ctx.moveTo(point.x, point.y);\r\n        else ctx.lineTo(point.x, point.y);\r\n    });\r\n    ctx.closePath();\r\n    ctx.clip();\r\n    if (backgroundImage && backgroundImage.complete && backgroundImage.naturalHeight !== 0) {\r\n        try {\r\n            const imgRatio = backgroundImage.naturalWidth / backgroundImage.naturalHeight;\r\n            const canvasRatio = width / height;\r\n            let drawWidth, drawHeight, drawX, drawY;\r\n            if (imgRatio > canvasRatio) {\r\n                drawHeight = height; drawWidth = imgRatio * drawHeight;\r\n                drawX = (width - drawWidth) / 2; drawY = 0;\r\n            } else {\r\n                drawWidth = width; drawHeight = drawWidth / imgRatio;\r\n                drawX = 0; drawY = (height - drawHeight) / 2;\r\n            }\r\n            ctx.drawImage(backgroundImage, drawX, drawY, drawWidth, drawHeight);\r\n        } catch (e) { ctx.fillStyle = '#BCBCBC'; ctx.fillRect(0, 0, width, height); }\r\n    } else { ctx.fillStyle = '#BCBCBC'; ctx.fillRect(0, 0, width, height); }\r\n    ctx.restore();\r\n};\r\n\r\n// Draws the concentric rings and diagonal guides\r\nconst drawGuides = (ctx, width, height, hexSize, centerX, centerY) => {\r\n    const ringRadii = [hexSize * 0.3, hexSize * 0.6, hexSize * 0.85];\r\n    ctx.strokeStyle = GUIDE_LINE_COLOR;\r\n    ctx.lineWidth = GUIDE_LINE_WIDTH;\r\n    // Rings\r\n    ringRadii.forEach(radius => {\r\n        ctx.beginPath(); ctx.arc(centerX, centerY, radius, 0, Math.PI * 2); ctx.stroke();\r\n    });\r\n    // Diagonals - use standard angles: 0, 60, 120 degrees\r\n    const diagonalAngles = [0, Math.PI / 3, 2 * Math.PI / 3];\r\n    diagonalAngles.forEach(angle => {\r\n        const startX = centerX + hexSize * Math.cos(angle); const startY = centerY + hexSize * Math.sin(angle);\r\n        const endX = centerX - hexSize * Math.cos(angle); const endY = centerY - hexSize * Math.sin(angle);\r\n        ctx.beginPath(); ctx.moveTo(startX, startY); ctx.lineTo(endX, endY); ctx.stroke();\r\n    });\r\n    // Center point\r\n    ctx.beginPath(); ctx.arc(centerX, centerY, 3, 0, Math.PI * 2);\r\n    ctx.fillStyle = GUIDE_LINE_COLOR; ctx.fill();\r\n    return ringRadii; // Return adjusted radii\r\n};\r\n\r\n// Fallback shape if image fails\r\nconst drawFallbackPew = (ctx) => {\r\n    ctx.beginPath(); ctx.arc(0, 0, 3, 0, Math.PI * 2);\r\n    ctx.fillStyle = 'red'; ctx.fill();\r\n};\r\n\r\n// Draw pews based on matrix\r\nconst drawPews = (ctx, matrix, pewImgObject, width, height, hexSize, centerX, centerY, ringRadii) => {\r\n    if (!matrix) return;\r\n    const imageToDraw = (pewImgObject && pewImgObject.complete && pewImgObject.naturalHeight !== 0) ? pewImgObject : null;\r\n\r\n    // Define the base angles for diagonals\r\n    const diagonalBaseAngles = [0, Math.PI / 3, 2 * Math.PI / 3];\r\n\r\n    // Convert matrix to pew placement\r\n    const pewPositions = [];\r\n    for (let r = 0; r < 3; r++) {\r\n        for (let d = 0; d < 3; d++) {\r\n            if (matrix[r][d] === 2) {\r\n                // Add symmetric pair\r\n                pewPositions.push([r, d, 0]);\r\n                pewPositions.push([r, d, 1]);\r\n            }\r\n        }\r\n    }\r\n\r\n    pewPositions.forEach(pew => {\r\n        const [ringIndex, diagonalIndex, side] = pew;\r\n        \r\n        // 1. Get Base Angle for the diagonal\r\n        const baseAngle = diagonalBaseAngles[diagonalIndex];\r\n\r\n        // 2. Determine Specific Pew Angle based on 'side'\r\n        const pewAngle = baseAngle + (side === 0 ? 0 : Math.PI);\r\n\r\n        // 3. Get Radius for the ring\r\n        const radius = ringRadii[ringIndex];\r\n\r\n        // 4. Calculate Coordinates\r\n        const x = centerX + radius * Math.cos(pewAngle);\r\n        const y = centerY + radius * Math.sin(pewAngle);\r\n\r\n        // 5. Translate origin to the pew's location\r\n        ctx.save();\r\n        ctx.translate(x, y);\r\n\r\n        // 6. Calculate Orientation Angle (perpendicular to the diagonal)\r\n        const orientationAngle = pewAngle + Math.PI / 2;\r\n\r\n        // 7. Rotate context\r\n        ctx.rotate(orientationAngle);\r\n\r\n        // 8. Draw Image (or fallback)\r\n        if (imageToDraw) {\r\n            try {\r\n                const imgAspect = imageToDraw.naturalWidth / imageToDraw.naturalHeight;\r\n                let dWidth = PEW_DISPLAY_WIDTH;\r\n                let dHeight = dWidth / imgAspect;\r\n                if (dHeight > PEW_DISPLAY_HEIGHT) {\r\n                    dHeight = PEW_DISPLAY_HEIGHT;\r\n                    dWidth = dHeight * imgAspect;\r\n                }\r\n                // Align top/narrow edge midpoint with origin\r\n                const dx = -dWidth / 2;\r\n                const dy = 0;\r\n                ctx.drawImage(imageToDraw, dx, dy, dWidth, dHeight);\r\n            } catch (e) { drawFallbackPew(ctx); }\r\n        } else { drawFallbackPew(ctx); }\r\n\r\n        // 9. Restore context\r\n        ctx.restore();\r\n    });\r\n};\r\n\r\n// Interpolate between matrices for smooth animation\r\nconst interpolateMatrix = (startMatrix, endMatrix, progress) => {\r\n    // Create an interpolated matrix where 0 = not present, 1 = fading in/out, 2 = fully present\r\n    const result = [\r\n        [0, 0, 0],\r\n        [0, 0, 0],\r\n        [0, 0, 0]\r\n    ];\r\n    \r\n    for (let r = 0; r < 3; r++) {\r\n        for (let d = 0; d < 3; d++) {\r\n            // If both have pews, keep it at 2\r\n            if (startMatrix[r][d] === 2 && endMatrix[r][d] === 2) {\r\n                result[r][d] = 2;\r\n            }\r\n            // If start has pew but end doesn't, fade out\r\n            else if (startMatrix[r][d] === 2 && endMatrix[r][d] === 0) {\r\n                result[r][d] = progress < 0.5 ? 2 : 0;\r\n            }\r\n            // If end has pew but start doesn't, fade in\r\n            else if (startMatrix[r][d] === 0 && endMatrix[r][d] === 2) {\r\n                result[r][d] = progress > 0.5 ? 2 : 0;\r\n            }\r\n        }\r\n    }\r\n    \r\n    return result;\r\n};\r\n\r\n// --- Main Component ---\r\nconst HexagonalChurch = forwardRef(({ matrix, animationSteps, customImages }, ref) => {\r\n    // State\r\n    const [bgImg, setBgImg] = useState(null);\r\n    const [pewImg, setPewImg] = useState(null);\r\n    const [currentStepIndex, setCurrentStepIndex] = useState(0);\r\n    const [animationProgress, setAnimationProgress] = useState(1); // 0 to 1\r\n    const [animationActive, setAnimationActive] = useState(false);\r\n    const [interpolatedMatrix, setInterpolatedMatrix] = useState(matrix);\r\n    const animationRef = useRef(null);\r\n\r\n    // Image Loading\r\n    useEffect(() => {\r\n        const img = new Image();\r\n        img.onload = () => { setBgImg(img); };\r\n        img.onerror = (e) => { console.error(\"BG Image Load Error:\", e); setBgImg(null); };\r\n        img.src = customImages?.hexagonBackground || defaultChurchBackground;\r\n        \r\n        return () => { img.onload = null; img.onerror = null; };\r\n    }, [customImages?.hexagonBackground]);\r\n    \r\n    useEffect(() => {\r\n        const img = new Image();\r\n        img.onload = () => { setPewImg(img); };\r\n        img.onerror = (e) => { console.error(\"Pew Image Load Error:\", e); setPewImg(null); };\r\n        img.src = customImages?.buttonIcon || defaultPewImage;\r\n        \r\n        return () => { img.onload = null; img.onerror = null; };\r\n    }, [customImages?.buttonIcon]);\r\n\r\n    // Animation processing\r\n    useEffect(() => {\r\n        // If we have new animation steps, start animation\r\n        if (animationSteps && animationSteps.length > 1) {\r\n            setCurrentStepIndex(0);\r\n            setAnimationProgress(0);\r\n            setAnimationActive(true);\r\n        }\r\n    }, [animationSteps]);\r\n\r\n    // Animation frame handler\r\n    useEffect(() => {\r\n        if (!animationActive || !animationSteps || animationSteps.length <= 1) return;\r\n        \r\n        let startTime;\r\n        const step = (timestamp) => {\r\n            if (!startTime) startTime = timestamp;\r\n            const elapsed = timestamp - startTime;\r\n            const progress = Math.min(elapsed / ANIMATION_DURATION, 1);\r\n            \r\n            setAnimationProgress(progress);\r\n            \r\n            if (progress < 1) {\r\n                animationRef.current = requestAnimationFrame(step);\r\n            } else {\r\n                // Move to next step or finish animation\r\n                if (currentStepIndex < animationSteps.length - 1) {\r\n                    setCurrentStepIndex(prev => prev + 1);\r\n                    setAnimationProgress(0);\r\n                    startTime = null;\r\n                    animationRef.current = requestAnimationFrame(step);\r\n                } else {\r\n                    setAnimationActive(false);\r\n                }\r\n            }\r\n        };\r\n        \r\n        animationRef.current = requestAnimationFrame(step);\r\n        \r\n        return () => {\r\n            if (animationRef.current) {\r\n                cancelAnimationFrame(animationRef.current);\r\n            }\r\n        };\r\n    }, [animationActive, currentStepIndex, animationSteps]);\r\n\r\n    // Update interpolated matrix during animation\r\n    useEffect(() => {\r\n        if (!animationActive || !animationSteps || animationSteps.length <= 1) {\r\n            setInterpolatedMatrix(matrix);\r\n            return;\r\n        }\r\n        \r\n        const currentStep = animationSteps[currentStepIndex];\r\n        const nextStep = animationSteps[Math.min(currentStepIndex + 1, animationSteps.length - 1)];\r\n        \r\n        if (currentStep && nextStep) {\r\n            setInterpolatedMatrix(interpolateMatrix(\r\n                currentStep.matrix, \r\n                nextStep.matrix, \r\n                animationProgress\r\n            ));\r\n        }\r\n    }, [animationActive, currentStepIndex, animationProgress, animationSteps, matrix]);\r\n\r\n    // Drawing function\r\n    const drawCanvas = useCallback(() => {\r\n        const canvas = ref?.current;\r\n        if (!canvas) return;\r\n        \r\n        const ctx = canvas.getContext('2d');\r\n        if (!ctx) return;\r\n        \r\n        const { width, height } = canvas;\r\n        const centerX = width / 2;\r\n        const centerY = height / 2;\r\n        const hexSize = Math.min(width, height) * 0.45;\r\n\r\n        ctx.clearRect(0, 0, width, height);\r\n\r\n        // Draw everything\r\n        const hexPoints = drawHexagonalOutline(ctx, width, height, hexSize, centerX, centerY);\r\n        drawBackground(ctx, width, height, bgImg, hexPoints);\r\n        drawHexagonalOutline(ctx, width, height, hexSize, centerX, centerY); // Outline on top\r\n        const ringRadii = drawGuides(ctx, width, height, hexSize, centerX, centerY);\r\n        \r\n        // Draw pews with current matrix or animation interpolation\r\n        const matrixToRender = animationActive ? interpolatedMatrix : matrix;\r\n        drawPews(ctx, matrixToRender, pewImg, width, height, hexSize, centerX, centerY, ringRadii);\r\n\r\n    }, [ref, matrix, bgImg, pewImg, animationActive, interpolatedMatrix]);\r\n\r\n    // Effect to trigger drawing\r\n    useEffect(() => {\r\n        drawCanvas();\r\n    }, [drawCanvas]);\r\n\r\n    // Render\r\n    return (\r\n        <div className=\"church-visualization\">\r\n            <canvas\r\n                ref={ref}\r\n                width={600}\r\n                height={600}\r\n                className=\"church-canvas\"\r\n                aria-label=\"Hexagonal church layout\"\r\n                role=\"img\"\r\n            />\r\n            {animationActive && (\r\n                <div className=\"animation-status\">\r\n                    <div className=\"step-description\">\r\n                        {animationSteps[currentStepIndex]?.description || \"Transformation in progress...\"}\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n});\r\n\r\nHexagonalChurch.displayName = 'HexagonalChurch';\r\nexport default HexagonalChurch;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}