{"ast":null,"code":"// Enhanced isValidVector function with proper mathematical validation\nexport const isValidVector=vector=>{if(!vector||vector.length!==6)return false;const[r1,r2,r3,d1,d2,d3]=vector;// Check individual constraints\nif(r1!==0&&r1!==2)return false;if(![0,2,4,6].includes(r2)||![0,2,4,6].includes(r3))return false;if(![0,2,4,6].includes(d1)||![0,2,4,6].includes(d2)||![0,2,4,6].includes(d3))return false;// Check sum constraints\nif(r1+r2+r3!==6)return false;if(d1+d2+d3!==6)return false;// The critical mathematical validity check based on pigeonhole principle\n// Check if we can place the pews respecting all constraints\nconst rings=[r1,r2,r3];const diagonals=[d1,d2,d3];// Try to distribute pews on the 3x3 grid of ring-diagonal intersections\n// Create a distribution matrix\nconst pewDistribution=Array(3).fill().map(()=>Array(3).fill(0));// Calculate required minimum pews at each intersection point\nlet canPlace=true;for(let r=0;r<3;r++){for(let d=0;d<3;d++){// Calculate minimum pews that MUST be placed at this intersection\n// This uses the pigeonhole principle\nconst minPewsRequired=Math.max(0,rings[r]+diagonals[d]-6);// If this exceeds 2 (one symmetric pair), the arrangement is impossible\nif(minPewsRequired>2){return false;}// Set the minimum required pews at this intersection\npewDistribution[r][d]=minPewsRequired;}}// Now try to distribute remaining pews\nconst remainingRingPews=[...rings];const remainingDiagPews=[...diagonals];// Subtract the minimum required pews we've already assigned\nfor(let r=0;r<3;r++){for(let d=0;d<3;d++){remainingRingPews[r]-=pewDistribution[r][d];remainingDiagPews[d]-=pewDistribution[r][d];}}// Try to place the remaining pews\n// We always place pews in pairs of 2 due to symmetry\nwhile(remainingRingPews.some(p=>p>0)&&remainingDiagPews.some(p=>p>0)){let placed=false;// Try to find a valid intersection to place 2 more pews\nfor(let r=0;r<3;r++){if(remainingRingPews[r]<2)continue;for(let d=0;d<3;d++){if(remainingDiagPews[d]<2)continue;// If this intersection already has a pair, we can't place another\nif(pewDistribution[r][d]>=2)continue;// Place a pair here\npewDistribution[r][d]+=2;remainingRingPews[r]-=2;remainingDiagPews[d]-=2;placed=true;break;}if(placed)break;}// If we couldn't place any more pews, the arrangement is invalid\nif(!placed){return false;}}// Check if all pews are placed\nif(remainingRingPews.some(p=>p>0)||remainingDiagPews.some(p=>p>0)){return false;}// Vector passes all constraints\nreturn true;};// Generate all valid vectors for the problem\nexport const generateAllValidVectors=()=>{const validVectors=[];// Systematically generate and test all possible vectors\nconst possibleValues=[0,2,4,6];// r1 can only be 0 or 2\nfor(const r1 of[0,2]){for(const r2 of possibleValues){// r3 is determined by r1 and r2 (must sum to 6)\nconst r3=6-r1-r2;if(!possibleValues.includes(r3))continue;for(const d1 of possibleValues){for(const d2 of possibleValues){// d3 is determined by d1 and d2 (must sum to 6)\nconst d3=6-d1-d2;if(!possibleValues.includes(d3))continue;// Check if this vector is valid\nconst vector=[r1,r2,r3,d1,d2,d3];if(isValidVector(vector)){validVectors.push(vector);}}}}}// Sort with multiply realizable vectors first\nconst multiplyRealizable=[[2,2,2,2,2,2],// 6 arrangements\n[0,2,4,2,2,2],// 3 arrangements\n[0,4,2,2,2,2],// 3 arrangements\n[2,0,4,2,2,2],// 3 arrangements\n[2,4,0,2,2,2]// 3 arrangements\n];// Filter out multiply realizable vectors from the main list\nconst uniquelyRealizable=validVectors.filter(vector=>!multiplyRealizable.some(mr=>JSON.stringify(mr)===JSON.stringify(vector)));// Return with multiply realizable vectors first\nreturn[...multiplyRealizable,...uniquelyRealizable];};// Find all possible arrangements for a given vector\nexport const findAllArrangements=vector=>{if(!isValidVector(vector))return[];const[r1,r2,r3,d1,d2,d3]=vector;const arrangements=[];// Special case: the most multiply realizable vector (2,2,2,2,2,2)\nif(JSON.stringify(vector)===JSON.stringify([2,2,2,2,2,2])){// This has 6 different arrangements\n// First arrangement: diagonal 0 on rings 0,1, diagonal 1 on rings 1,2, diagonal 2 on rings 0,2\narrangements.push([[0,0,0],[0,0,1],// Ring 0, Diagonal 0\n[1,1,0],[1,1,1],// Ring 1, Diagonal 1\n[2,2,0],[2,2,1]// Ring 2, Diagonal 2\n]);// Second arrangement: diagonal 0 on rings 0,2, diagonal 1 on rings 0,1, diagonal 2 on rings 1,2\narrangements.push([[0,1,0],[0,1,1],// Ring 0, Diagonal 1\n[1,2,0],[1,2,1],// Ring 1, Diagonal 2\n[2,0,0],[2,0,1]// Ring 2, Diagonal 0\n]);// Third arrangement: diagonal 0 on rings 1,2, diagonal 1 on rings 0,2, diagonal 2 on rings 0,1\narrangements.push([[0,2,0],[0,2,1],// Ring 0, Diagonal 2\n[1,0,0],[1,0,1],// Ring 1, Diagonal 0\n[2,1,0],[2,1,1]// Ring 2, Diagonal 1\n]);// Three more arrangements switching the sides\narrangements.push([[0,0,0],[0,0,1],[1,2,0],[1,2,1],[2,1,0],[2,1,1]]);arrangements.push([[0,1,0],[0,1,1],[1,0,0],[1,0,1],[2,2,0],[2,2,1]]);arrangements.push([[0,2,0],[0,2,1],[1,1,0],[1,1,1],[2,0,0],[2,0,1]]);return arrangements;}// For (0,2,4,2,2,2) - 3 arrangements\nif(JSON.stringify(vector)===JSON.stringify([0,2,4,2,2,2])){arrangements.push([[1,0,0],[1,0,1],// Middle ring, diagonal 0\n[2,0,0],[2,0,1],// Outer ring, diagonal 0\n[2,1,0],[2,1,1]// Outer ring, diagonal 1\n]);arrangements.push([[1,1,0],[1,1,1],// Middle ring, diagonal 1\n[2,0,0],[2,0,1],// Outer ring, diagonal 0\n[2,2,0],[2,2,1]// Outer ring, diagonal 2\n]);arrangements.push([[1,2,0],[1,2,1],// Middle ring, diagonal 2\n[2,1,0],[2,1,1],// Outer ring, diagonal 1\n[2,2,0],[2,2,1]// Outer ring, diagonal 2\n]);return arrangements;}// For (0,4,2,2,2,2) - 3 arrangements\nif(JSON.stringify(vector)===JSON.stringify([0,4,2,2,2,2])){arrangements.push([[1,0,0],[1,0,1],// Middle ring, diagonal 0\n[1,1,0],[1,1,1],// Middle ring, diagonal 1\n[2,2,0],[2,2,1]// Outer ring, diagonal 2\n]);arrangements.push([[1,0,0],[1,0,1],// Middle ring, diagonal 0\n[1,2,0],[1,2,1],// Middle ring, diagonal 2\n[2,1,0],[2,1,1]// Outer ring, diagonal 1\n]);arrangements.push([[1,1,0],[1,1,1],// Middle ring, diagonal 1\n[1,2,0],[1,2,1],// Middle ring, diagonal 2\n[2,0,0],[2,0,1]// Outer ring, diagonal 0\n]);return arrangements;}// For (2,0,4,2,2,2) - 3 arrangements\nif(JSON.stringify(vector)===JSON.stringify([2,0,4,2,2,2])){arrangements.push([[0,0,0],[0,0,1],// Inner ring, diagonal 0\n[2,1,0],[2,1,1],// Outer ring, diagonal 1\n[2,2,0],[2,2,1]// Outer ring, diagonal 2\n]);arrangements.push([[0,1,0],[0,1,1],// Inner ring, diagonal 1\n[2,0,0],[2,0,1],// Outer ring, diagonal 0\n[2,2,0],[2,2,1]// Outer ring, diagonal 2\n]);arrangements.push([[0,2,0],[0,2,1],// Inner ring, diagonal 2\n[2,0,0],[2,0,1],// Outer ring, diagonal 0\n[2,1,0],[2,1,1]// Outer ring, diagonal 1\n]);return arrangements;}// For (2,4,0,2,2,2) - 3 arrangements\nif(JSON.stringify(vector)===JSON.stringify([2,4,0,2,2,2])){arrangements.push([[0,0,0],[0,0,1],// Inner ring, diagonal 0\n[1,1,0],[1,1,1],// Middle ring, diagonal 1\n[1,2,0],[1,2,1]// Middle ring, diagonal 2\n]);arrangements.push([[0,1,0],[0,1,1],// Inner ring, diagonal 1\n[1,0,0],[1,0,1],// Middle ring, diagonal 0\n[1,2,0],[1,2,1]// Middle ring, diagonal 2\n]);arrangements.push([[0,2,0],[0,2,1],// Inner ring, diagonal 2\n[1,0,0],[1,0,1],// Middle ring, diagonal 0\n[1,1,0],[1,1,1]// Middle ring, diagonal 1\n]);return arrangements;}// Handle (0,0,6,2,2,2) - the layout in the original image\nif(JSON.stringify(vector)===JSON.stringify([0,0,6,2,2,2])){arrangements.push([[2,0,0],[2,0,1],// Outer ring, diagonal 0\n[2,1,0],[2,1,1],// Outer ring, diagonal 1\n[2,2,0],[2,2,1]// Outer ring, diagonal 2\n]);return arrangements;}// Handle (0,6,0,2,2,2) - All pews on middle ring, evenly distributed\nif(JSON.stringify(vector)===JSON.stringify([0,6,0,2,2,2])){arrangements.push([[1,0,0],[1,0,1],// Middle ring, diagonal 0\n[1,1,0],[1,1,1],// Middle ring, diagonal 1\n[1,2,0],[1,2,1]// Middle ring, diagonal 2\n]);return arrangements;}// For valid vectors with concentrated distributions\n// Handle (0,0,6,6,0,0) - All pews on outer ring, first diagonal\nif(JSON.stringify(vector)===JSON.stringify([0,0,6,6,0,0])){arrangements.push([[2,0,0],[2,0,1],// Outer ring, diagonal 0\n[2,0,0],[2,0,1],// Outer ring, diagonal 0\n[2,0,0],[2,0,1]// Outer ring, diagonal 0\n]);return arrangements;}// For uniquely realizable vectors, generate a default arrangement\nconst defaultArrangement=[];// Place pews based on the vector constraints\nlet remainingPews=6;let ringsPewsPlaced=[0,0,0];// Count of pews placed on each ring\nlet diagPewsPlaced=[0,0,0];// Count of pews placed on each diagonal\n// Helper function to place a pair of pews\nconst placePewPair=(ring,diag)=>{defaultArrangement.push([ring,diag,0],[ring,diag,1]);ringsPewsPlaced[ring]+=2;diagPewsPlaced[diag]+=2;remainingPews-=2;};// Place pews on innermost ring (r1)\nif(r1===2){// Find a diagonal with pews\nfor(let diag=0;diag<3;diag++){if(vector[diag+3]>=2&&diagPewsPlaced[diag]<vector[diag+3]){placePewPair(0,diag);break;}}}// Place pews on middle ring (r2)\nwhile(ringsPewsPlaced[1]<r2){for(let diag=0;diag<3;diag++){if(vector[diag+3]>=2&&diagPewsPlaced[diag]<vector[diag+3]&&ringsPewsPlaced[1]<r2){placePewPair(1,diag);}}}// Place pews on outer ring (r3)\nwhile(ringsPewsPlaced[2]<r3){for(let diag=0;diag<3;diag++){if(vector[diag+3]>=2&&diagPewsPlaced[diag]<vector[diag+3]&&ringsPewsPlaced[2]<r3){placePewPair(2,diag);}}}if(defaultArrangement.length===6){arrangements.push(defaultArrangement);}else{// If we couldn't place all pews properly, fallback to a simple arrangement\n// This should only happen if our algorithm has a bug\nconsole.warn(\"Failed to generate a proper arrangement for vector\",vector);// Create at least something to display\narrangements.push([[0,0,0],[0,0,1],[1,1,0],[1,1,1],[2,2,0],[2,2,1]]);}return arrangements;};","map":{"version":3,"names":["isValidVector","vector","length","r1","r2","r3","d1","d2","d3","includes","rings","diagonals","pewDistribution","Array","fill","map","canPlace","r","d","minPewsRequired","Math","max","remainingRingPews","remainingDiagPews","some","p","placed","generateAllValidVectors","validVectors","possibleValues","push","multiplyRealizable","uniquelyRealizable","filter","mr","JSON","stringify","findAllArrangements","arrangements","defaultArrangement","remainingPews","ringsPewsPlaced","diagPewsPlaced","placePewPair","ring","diag","console","warn"],"sources":["C:/ApplicationDev/pope-punk.github.io/hexagonal-church-app/src/utils/pewArrangements.js"],"sourcesContent":["// Enhanced isValidVector function with proper mathematical validation\nexport const isValidVector = (vector) => {\n  if (!vector || vector.length !== 6) return false;\n  \n  const [r1, r2, r3, d1, d2, d3] = vector;\n  \n  // Check individual constraints\n  if (r1 !== 0 && r1 !== 2) return false;\n  if (![0, 2, 4, 6].includes(r2) || ![0, 2, 4, 6].includes(r3)) return false;\n  if (![0, 2, 4, 6].includes(d1) || ![0, 2, 4, 6].includes(d2) || ![0, 2, 4, 6].includes(d3)) return false;\n  \n  // Check sum constraints\n  if (r1 + r2 + r3 !== 6) return false;\n  if (d1 + d2 + d3 !== 6) return false;\n  \n  // The critical mathematical validity check based on pigeonhole principle\n  // Check if we can place the pews respecting all constraints\n  const rings = [r1, r2, r3];\n  const diagonals = [d1, d2, d3];\n  \n  // Try to distribute pews on the 3x3 grid of ring-diagonal intersections\n  // Create a distribution matrix\n  const pewDistribution = Array(3).fill().map(() => Array(3).fill(0));\n  \n  // Calculate required minimum pews at each intersection point\n  let canPlace = true;\n  for (let r = 0; r < 3; r++) {\n    for (let d = 0; d < 3; d++) {\n      // Calculate minimum pews that MUST be placed at this intersection\n      // This uses the pigeonhole principle\n      const minPewsRequired = Math.max(0, rings[r] + diagonals[d] - 6);\n      \n      // If this exceeds 2 (one symmetric pair), the arrangement is impossible\n      if (minPewsRequired > 2) {\n        return false;\n      }\n      \n      // Set the minimum required pews at this intersection\n      pewDistribution[r][d] = minPewsRequired;\n    }\n  }\n  \n  // Now try to distribute remaining pews\n  const remainingRingPews = [...rings];\n  const remainingDiagPews = [...diagonals];\n  \n  // Subtract the minimum required pews we've already assigned\n  for (let r = 0; r < 3; r++) {\n    for (let d = 0; d < 3; d++) {\n      remainingRingPews[r] -= pewDistribution[r][d];\n      remainingDiagPews[d] -= pewDistribution[r][d];\n    }\n  }\n  \n  // Try to place the remaining pews\n  // We always place pews in pairs of 2 due to symmetry\n  while (remainingRingPews.some(p => p > 0) && remainingDiagPews.some(p => p > 0)) {\n    let placed = false;\n    \n    // Try to find a valid intersection to place 2 more pews\n    for (let r = 0; r < 3; r++) {\n      if (remainingRingPews[r] < 2) continue;\n      \n      for (let d = 0; d < 3; d++) {\n        if (remainingDiagPews[d] < 2) continue;\n        \n        // If this intersection already has a pair, we can't place another\n        if (pewDistribution[r][d] >= 2) continue;\n        \n        // Place a pair here\n        pewDistribution[r][d] += 2;\n        remainingRingPews[r] -= 2;\n        remainingDiagPews[d] -= 2;\n        placed = true;\n        break;\n      }\n      \n      if (placed) break;\n    }\n    \n    // If we couldn't place any more pews, the arrangement is invalid\n    if (!placed) {\n      return false;\n    }\n  }\n  \n  // Check if all pews are placed\n  if (remainingRingPews.some(p => p > 0) || remainingDiagPews.some(p => p > 0)) {\n    return false;\n  }\n  \n  // Vector passes all constraints\n  return true;\n};\n\n// Generate all valid vectors for the problem\nexport const generateAllValidVectors = () => {\n  const validVectors = [];\n  \n  // Systematically generate and test all possible vectors\n  const possibleValues = [0, 2, 4, 6];\n  \n  // r1 can only be 0 or 2\n  for (const r1 of [0, 2]) {\n    for (const r2 of possibleValues) {\n      // r3 is determined by r1 and r2 (must sum to 6)\n      const r3 = 6 - r1 - r2;\n      if (!possibleValues.includes(r3)) continue;\n      \n      for (const d1 of possibleValues) {\n        for (const d2 of possibleValues) {\n          // d3 is determined by d1 and d2 (must sum to 6)\n          const d3 = 6 - d1 - d2;\n          if (!possibleValues.includes(d3)) continue;\n          \n          // Check if this vector is valid\n          const vector = [r1, r2, r3, d1, d2, d3];\n          if (isValidVector(vector)) {\n            validVectors.push(vector);\n          }\n        }\n      }\n    }\n  }\n  \n  // Sort with multiply realizable vectors first\n  const multiplyRealizable = [\n    [2, 2, 2, 2, 2, 2], // 6 arrangements\n    [0, 2, 4, 2, 2, 2], // 3 arrangements\n    [0, 4, 2, 2, 2, 2], // 3 arrangements\n    [2, 0, 4, 2, 2, 2], // 3 arrangements\n    [2, 4, 0, 2, 2, 2]  // 3 arrangements\n  ];\n  \n  // Filter out multiply realizable vectors from the main list\n  const uniquelyRealizable = validVectors.filter(vector => \n    !multiplyRealizable.some(mr => \n      JSON.stringify(mr) === JSON.stringify(vector)\n    )\n  );\n  \n  // Return with multiply realizable vectors first\n  return [...multiplyRealizable, ...uniquelyRealizable];\n};\n\n// Find all possible arrangements for a given vector\nexport const findAllArrangements = (vector) => {\n  if (!isValidVector(vector)) return [];\n  \n  const [r1, r2, r3, d1, d2, d3] = vector;\n  const arrangements = [];\n  \n  // Special case: the most multiply realizable vector (2,2,2,2,2,2)\n  if (JSON.stringify(vector) === JSON.stringify([2, 2, 2, 2, 2, 2])) {\n    // This has 6 different arrangements\n    // First arrangement: diagonal 0 on rings 0,1, diagonal 1 on rings 1,2, diagonal 2 on rings 0,2\n    arrangements.push([\n      [0, 0, 0], [0, 0, 1],  // Ring 0, Diagonal 0\n      [1, 1, 0], [1, 1, 1],  // Ring 1, Diagonal 1\n      [2, 2, 0], [2, 2, 1]   // Ring 2, Diagonal 2\n    ]);\n    \n    // Second arrangement: diagonal 0 on rings 0,2, diagonal 1 on rings 0,1, diagonal 2 on rings 1,2\n    arrangements.push([\n      [0, 1, 0], [0, 1, 1],  // Ring 0, Diagonal 1\n      [1, 2, 0], [1, 2, 1],  // Ring 1, Diagonal 2\n      [2, 0, 0], [2, 0, 1]   // Ring 2, Diagonal 0\n    ]);\n    \n    // Third arrangement: diagonal 0 on rings 1,2, diagonal 1 on rings 0,2, diagonal 2 on rings 0,1\n    arrangements.push([\n      [0, 2, 0], [0, 2, 1],  // Ring 0, Diagonal 2\n      [1, 0, 0], [1, 0, 1],  // Ring 1, Diagonal 0\n      [2, 1, 0], [2, 1, 1]   // Ring 2, Diagonal 1\n    ]);\n    \n    // Three more arrangements switching the sides\n    arrangements.push([\n      [0, 0, 0], [0, 0, 1],\n      [1, 2, 0], [1, 2, 1],\n      [2, 1, 0], [2, 1, 1]\n    ]);\n    \n    arrangements.push([\n      [0, 1, 0], [0, 1, 1],\n      [1, 0, 0], [1, 0, 1],\n      [2, 2, 0], [2, 2, 1]\n    ]);\n    \n    arrangements.push([\n      [0, 2, 0], [0, 2, 1],\n      [1, 1, 0], [1, 1, 1],\n      [2, 0, 0], [2, 0, 1]\n    ]);\n    \n    return arrangements;\n  }\n  \n  // For (0,2,4,2,2,2) - 3 arrangements\n  if (JSON.stringify(vector) === JSON.stringify([0, 2, 4, 2, 2, 2])) {\n    arrangements.push([\n      [1, 0, 0], [1, 0, 1],  // Middle ring, diagonal 0\n      [2, 0, 0], [2, 0, 1],  // Outer ring, diagonal 0\n      [2, 1, 0], [2, 1, 1]   // Outer ring, diagonal 1\n    ]);\n    \n    arrangements.push([\n      [1, 1, 0], [1, 1, 1],  // Middle ring, diagonal 1\n      [2, 0, 0], [2, 0, 1],  // Outer ring, diagonal 0\n      [2, 2, 0], [2, 2, 1]   // Outer ring, diagonal 2\n    ]);\n    \n    arrangements.push([\n      [1, 2, 0], [1, 2, 1],  // Middle ring, diagonal 2\n      [2, 1, 0], [2, 1, 1],  // Outer ring, diagonal 1\n      [2, 2, 0], [2, 2, 1]   // Outer ring, diagonal 2\n    ]);\n    \n    return arrangements;\n  }\n  \n  // For (0,4,2,2,2,2) - 3 arrangements\n  if (JSON.stringify(vector) === JSON.stringify([0, 4, 2, 2, 2, 2])) {\n    arrangements.push([\n      [1, 0, 0], [1, 0, 1],  // Middle ring, diagonal 0\n      [1, 1, 0], [1, 1, 1],  // Middle ring, diagonal 1\n      [2, 2, 0], [2, 2, 1]   // Outer ring, diagonal 2\n    ]);\n    \n    arrangements.push([\n      [1, 0, 0], [1, 0, 1],  // Middle ring, diagonal 0\n      [1, 2, 0], [1, 2, 1],  // Middle ring, diagonal 2\n      [2, 1, 0], [2, 1, 1]   // Outer ring, diagonal 1\n    ]);\n    \n    arrangements.push([\n      [1, 1, 0], [1, 1, 1],  // Middle ring, diagonal 1\n      [1, 2, 0], [1, 2, 1],  // Middle ring, diagonal 2\n      [2, 0, 0], [2, 0, 1]   // Outer ring, diagonal 0\n    ]);\n    \n    return arrangements;\n  }\n  \n  // For (2,0,4,2,2,2) - 3 arrangements\n  if (JSON.stringify(vector) === JSON.stringify([2, 0, 4, 2, 2, 2])) {\n    arrangements.push([\n      [0, 0, 0], [0, 0, 1],  // Inner ring, diagonal 0\n      [2, 1, 0], [2, 1, 1],  // Outer ring, diagonal 1\n      [2, 2, 0], [2, 2, 1]   // Outer ring, diagonal 2\n    ]);\n    \n    arrangements.push([\n      [0, 1, 0], [0, 1, 1],  // Inner ring, diagonal 1\n      [2, 0, 0], [2, 0, 1],  // Outer ring, diagonal 0\n      [2, 2, 0], [2, 2, 1]   // Outer ring, diagonal 2\n    ]);\n    \n    arrangements.push([\n      [0, 2, 0], [0, 2, 1],  // Inner ring, diagonal 2\n      [2, 0, 0], [2, 0, 1],  // Outer ring, diagonal 0\n      [2, 1, 0], [2, 1, 1]   // Outer ring, diagonal 1\n    ]);\n    \n    return arrangements;\n  }\n  \n  // For (2,4,0,2,2,2) - 3 arrangements\n  if (JSON.stringify(vector) === JSON.stringify([2, 4, 0, 2, 2, 2])) {\n    arrangements.push([\n      [0, 0, 0], [0, 0, 1],  // Inner ring, diagonal 0\n      [1, 1, 0], [1, 1, 1],  // Middle ring, diagonal 1\n      [1, 2, 0], [1, 2, 1]   // Middle ring, diagonal 2\n    ]);\n    \n    arrangements.push([\n      [0, 1, 0], [0, 1, 1],  // Inner ring, diagonal 1\n      [1, 0, 0], [1, 0, 1],  // Middle ring, diagonal 0\n      [1, 2, 0], [1, 2, 1]   // Middle ring, diagonal 2\n    ]);\n    \n    arrangements.push([\n      [0, 2, 0], [0, 2, 1],  // Inner ring, diagonal 2\n      [1, 0, 0], [1, 0, 1],  // Middle ring, diagonal 0\n      [1, 1, 0], [1, 1, 1]   // Middle ring, diagonal 1\n    ]);\n    \n    return arrangements;\n  }\n  \n  // Handle (0,0,6,2,2,2) - the layout in the original image\n  if (JSON.stringify(vector) === JSON.stringify([0, 0, 6, 2, 2, 2])) {\n    arrangements.push([\n      [2, 0, 0], [2, 0, 1],  // Outer ring, diagonal 0\n      [2, 1, 0], [2, 1, 1],  // Outer ring, diagonal 1\n      [2, 2, 0], [2, 2, 1]   // Outer ring, diagonal 2\n    ]);\n    return arrangements;\n  }\n  \n  // Handle (0,6,0,2,2,2) - All pews on middle ring, evenly distributed\n  if (JSON.stringify(vector) === JSON.stringify([0, 6, 0, 2, 2, 2])) {\n    arrangements.push([\n      [1, 0, 0], [1, 0, 1],  // Middle ring, diagonal 0\n      [1, 1, 0], [1, 1, 1],  // Middle ring, diagonal 1\n      [1, 2, 0], [1, 2, 1]   // Middle ring, diagonal 2\n    ]);\n    return arrangements;\n  }\n  \n  // For valid vectors with concentrated distributions\n  // Handle (0,0,6,6,0,0) - All pews on outer ring, first diagonal\n  if (JSON.stringify(vector) === JSON.stringify([0, 0, 6, 6, 0, 0])) {\n    arrangements.push([\n      [2, 0, 0], [2, 0, 1],  // Outer ring, diagonal 0\n      [2, 0, 0], [2, 0, 1],  // Outer ring, diagonal 0\n      [2, 0, 0], [2, 0, 1]   // Outer ring, diagonal 0\n    ]);\n    return arrangements;\n  }\n  \n  // For uniquely realizable vectors, generate a default arrangement\n  const defaultArrangement = [];\n  \n  // Place pews based on the vector constraints\n  let remainingPews = 6;\n  let ringsPewsPlaced = [0, 0, 0]; // Count of pews placed on each ring\n  let diagPewsPlaced = [0, 0, 0];  // Count of pews placed on each diagonal\n  \n  // Helper function to place a pair of pews\n  const placePewPair = (ring, diag) => {\n    defaultArrangement.push([ring, diag, 0], [ring, diag, 1]);\n    ringsPewsPlaced[ring] += 2;\n    diagPewsPlaced[diag] += 2;\n    remainingPews -= 2;\n  };\n  \n  // Place pews on innermost ring (r1)\n  if (r1 === 2) {\n    // Find a diagonal with pews\n    for (let diag = 0; diag < 3; diag++) {\n      if (vector[diag + 3] >= 2 && diagPewsPlaced[diag] < vector[diag + 3]) {\n        placePewPair(0, diag);\n        break;\n      }\n    }\n  }\n  \n  // Place pews on middle ring (r2)\n  while (ringsPewsPlaced[1] < r2) {\n    for (let diag = 0; diag < 3; diag++) {\n      if (vector[diag + 3] >= 2 && diagPewsPlaced[diag] < vector[diag + 3] && ringsPewsPlaced[1] < r2) {\n        placePewPair(1, diag);\n      }\n    }\n  }\n  \n  // Place pews on outer ring (r3)\n  while (ringsPewsPlaced[2] < r3) {\n    for (let diag = 0; diag < 3; diag++) {\n      if (vector[diag + 3] >= 2 && diagPewsPlaced[diag] < vector[diag + 3] && ringsPewsPlaced[2] < r3) {\n        placePewPair(2, diag);\n      }\n    }\n  }\n  \n  if (defaultArrangement.length === 6) {\n    arrangements.push(defaultArrangement);\n  } else {\n    // If we couldn't place all pews properly, fallback to a simple arrangement\n    // This should only happen if our algorithm has a bug\n    console.warn(\"Failed to generate a proper arrangement for vector\", vector);\n    \n    // Create at least something to display\n    arrangements.push([\n      [0, 0, 0], [0, 0, 1], \n      [1, 1, 0], [1, 1, 1],\n      [2, 2, 0], [2, 2, 1]\n    ]);\n  }\n  \n  return arrangements;\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}