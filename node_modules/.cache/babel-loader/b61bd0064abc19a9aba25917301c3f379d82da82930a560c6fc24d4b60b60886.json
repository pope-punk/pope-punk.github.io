{"ast":null,"code":"var _jsxFileName = \"C:\\\\ApplicationDev\\\\pope-punk.github.io\\\\src\\\\components\\\\MatrixInput.jsx\",\n  _s = $RefreshSig$();\n// src/components/MatrixInput.jsx\nimport React, { useState, useEffect } from 'react';\nimport { isValidMatrix } from '../utils/matrixUtils';\n\n// ** Import the specific button images **\nimport defaultUnpressedButton from '../assets/unpressed-button.png'; // Fallback if not passed\nimport defaultPressedButton from '../assets/pressed-button.png'; // Fallback if not passed\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MatrixInput = ({\n  initialMatrix,\n  onSubmit,\n  customImages\n}) => {\n  _s();\n  const [matrix, setMatrix] = useState([[0, 0, 0], [0, 0, 0], [0, 0, 0]]);\n  const [error, setError] = useState('');\n  useEffect(() => {\n    if (initialMatrix && Array.isArray(initialMatrix) && initialMatrix.length === 3) {\n      setMatrix(initialMatrix);\n    }\n  }, [initialMatrix]);\n  const handleCellToggle = (ringIndex, diagIndex) => {\n    const newMatrix = JSON.parse(JSON.stringify(matrix));\n    newMatrix[ringIndex][diagIndex] = newMatrix[ringIndex][diagIndex] === 0 ? 2 : 0;\n    setMatrix(newMatrix);\n    setError(''); // Clear any previous error\n\n    // Auto-check validity on each toggle\n    if (isValidMatrix(newMatrix)) {\n      onSubmit(newMatrix);\n    }\n  };\n\n  // Get total pews placed\n  const totalPairs = matrix.flat().reduce((sum, val) => sum + (val === 2 ? 1 : 0), 0);\n  const innerRingPairs = matrix[0].reduce((sum, val) => sum + (val === 2 ? 1 : 0), 0);\n\n  // Determine which image assets to use (passed props or defaults)\n  const keypadBg = customImages === null || customImages === void 0 ? void 0 : customImages.keypadBackground; // Use the prop\n  const unpressedImg = (customImages === null || customImages === void 0 ? void 0 : customImages.unpressedButton) || defaultUnpressedButton;\n  const pressedImg = (customImages === null || customImages === void 0 ? void 0 : customImages.pressedButton) || defaultPressedButton;\n\n  // Apply keypad background style to the main container\n  const keypadStyle = keypadBg ? {\n    backgroundImage: `url(${keypadBg})`\n  } : {};\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"matrix-input\",\n    style: keypadStyle,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"matrix-grid\",\n      children: matrix.map((row, ringIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"matrix-row\",\n        children: row.map((cell, diagIndex) => {\n          const isPressed = cell === 2;\n          const buttonStateImage = isPressed ? pressedImg : unpressedImg;\n          return /*#__PURE__*/_jsxDEV(\"button\", {\n            // Apply 'pressed' class for potential CSS targeting\n            className: `matrix-cell ${isPressed ? 'pressed' : ''}`,\n            onClick: () => handleCellToggle(ringIndex, diagIndex),\n            type: \"button\"\n            // Remove inline background style for buttons\n            // style={getButtonStyle(cell === 2)} \n            ,\n            \"aria-label\": `Toggle pew at ring ${ringIndex + 1}, diagonal ${diagIndex + 1}`,\n            \"aria-pressed\": isPressed,\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: buttonStateImage,\n              alt: isPressed ? \"Pew Placed\" : \"Empty Slot\",\n              className: \"button-state-icon\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 70,\n              columnNumber: 19\n            }, this)\n          }, `cell-${ringIndex}-${diagIndex}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 17\n          }, this);\n        })\n      }, `ring-${ringIndex}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"matrix-status\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: isValidMatrix(matrix) ? /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"valid-config\",\n          children: \"Valid Configuration\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"invalid-config\",\n          children: totalPairs === 3 && innerRingPairs <= 1 ? \"Arrangement doesn't match church geometry\" : `Need ${3 - totalPairs} more pair${3 - totalPairs !== 1 ? 's' : ''} ${innerRingPairs > 1 ? '(max 1 on inner ring)' : ''}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-message\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n};\n_s(MatrixInput, \"RV1/05rog0HS2AhopcblDPJSNB0=\");\n_c = MatrixInput;\nexport default MatrixInput;\nvar _c;\n$RefreshReg$(_c, \"MatrixInput\");","map":{"version":3,"names":["React","useState","useEffect","isValidMatrix","defaultUnpressedButton","defaultPressedButton","jsxDEV","_jsxDEV","MatrixInput","initialMatrix","onSubmit","customImages","_s","matrix","setMatrix","error","setError","Array","isArray","length","handleCellToggle","ringIndex","diagIndex","newMatrix","JSON","parse","stringify","totalPairs","flat","reduce","sum","val","innerRingPairs","keypadBg","keypadBackground","unpressedImg","unpressedButton","pressedImg","pressedButton","keypadStyle","backgroundImage","className","style","children","map","row","cell","isPressed","buttonStateImage","onClick","type","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/ApplicationDev/pope-punk.github.io/src/components/MatrixInput.jsx"],"sourcesContent":["// src/components/MatrixInput.jsx\r\nimport React, { useState, useEffect } from 'react';\r\nimport { isValidMatrix } from '../utils/matrixUtils';\r\n\r\n// ** Import the specific button images **\r\nimport defaultUnpressedButton from '../assets/unpressed-button.png'; // Fallback if not passed\r\nimport defaultPressedButton from '../assets/pressed-button.png'; // Fallback if not passed\r\n\r\nconst MatrixInput = ({ initialMatrix, onSubmit, customImages }) => {\r\n  const [matrix, setMatrix] = useState([\r\n    [0, 0, 0],\r\n    [0, 0, 0],\r\n    [0, 0, 0]\r\n  ]);\r\n  const [error, setError] = useState('');\r\n\r\n  useEffect(() => {\r\n    if (initialMatrix && Array.isArray(initialMatrix) && initialMatrix.length === 3) {\r\n      setMatrix(initialMatrix);\r\n    }\r\n  }, [initialMatrix]);\r\n\r\n  const handleCellToggle = (ringIndex, diagIndex) => {\r\n    const newMatrix = JSON.parse(JSON.stringify(matrix));\r\n    newMatrix[ringIndex][diagIndex] = newMatrix[ringIndex][diagIndex] === 0 ? 2 : 0;\r\n    setMatrix(newMatrix);\r\n    setError(''); // Clear any previous error\r\n\r\n    // Auto-check validity on each toggle\r\n    if (isValidMatrix(newMatrix)) {\r\n      onSubmit(newMatrix);\r\n    }\r\n  };\r\n\r\n  // Get total pews placed\r\n  const totalPairs = matrix.flat().reduce((sum, val) => sum + (val === 2 ? 1 : 0), 0);\r\n  const innerRingPairs = matrix[0].reduce((sum, val) => sum + (val === 2 ? 1 : 0), 0);\r\n\r\n  // Determine which image assets to use (passed props or defaults)\r\n  const keypadBg = customImages?.keypadBackground; // Use the prop\r\n  const unpressedImg = customImages?.unpressedButton || defaultUnpressedButton;\r\n  const pressedImg = customImages?.pressedButton || defaultPressedButton;\r\n\r\n  // Apply keypad background style to the main container\r\n  const keypadStyle = keypadBg ? \r\n    { backgroundImage: `url(${keypadBg})` } : {};\r\n\r\n  return (\r\n    <div className=\"matrix-input\" style={keypadStyle}>\r\n      <div className=\"matrix-grid\">\r\n        {matrix.map((row, ringIndex) => (\r\n          <div key={`ring-${ringIndex}`} className=\"matrix-row\">\r\n            {row.map((cell, diagIndex) => {\r\n              const isPressed = cell === 2;\r\n              const buttonStateImage = isPressed ? pressedImg : unpressedImg;\r\n              \r\n              return (\r\n                <button\r\n                  key={`cell-${ringIndex}-${diagIndex}`}\r\n                  // Apply 'pressed' class for potential CSS targeting\r\n                  className={`matrix-cell ${isPressed ? 'pressed' : ''}`} \r\n                  onClick={() => handleCellToggle(ringIndex, diagIndex)}\r\n                  type=\"button\"\r\n                  // Remove inline background style for buttons\r\n                  // style={getButtonStyle(cell === 2)} \r\n                  aria-label={`Toggle pew at ring ${ringIndex + 1}, diagonal ${diagIndex + 1}`}\r\n                  aria-pressed={isPressed}\r\n                >\r\n                  {/* Display the correct bust icon based on state */}\r\n                  <img \r\n                    src={buttonStateImage} \r\n                    alt={isPressed ? \"Pew Placed\" : \"Empty Slot\"} \r\n                    className=\"button-state-icon\" \r\n                  />\r\n                </button>\r\n              );\r\n            })}\r\n          </div>\r\n        ))}\r\n      </div>\r\n      \r\n      <div className=\"matrix-status\">\r\n        <div>\r\n          {isValidMatrix(matrix) ? \r\n            <span className=\"valid-config\">Valid Configuration</span> : \r\n            <span className=\"invalid-config\">{totalPairs === 3 && innerRingPairs <= 1 ? \r\n              \"Arrangement doesn't match church geometry\" : \r\n              `Need ${3-totalPairs} more pair${3-totalPairs !== 1 ? 's' : ''} ${innerRingPairs > 1 ? '(max 1 on inner ring)' : ''}`}\r\n            </span>\r\n          }\r\n        </div>\r\n      </div>\r\n      \r\n      {error && <div className=\"error-message\">{error}</div>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MatrixInput;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}