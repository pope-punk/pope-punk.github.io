{"ast":null,"code":"// src/components/MatrixInput.jsx\nimport React,{useState,useEffect}from'react';import{isValidMatrix}from'../utils/matrixUtils';// ** Import the specific button images **\nimport defaultUnpressedButton from'../assets/unpressed-button.png';// Fallback if not passed\nimport defaultPressedButton from'../assets/pressed-button.png';// Fallback if not passed\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const MatrixInput=_ref=>{let{initialMatrix,onSubmit,customImages}=_ref;const[matrix,setMatrix]=useState([[0,0,0],[0,0,0],[0,0,0]]);const[error,setError]=useState('');useEffect(()=>{if(initialMatrix&&Array.isArray(initialMatrix)&&initialMatrix.length===3){setMatrix(initialMatrix);}},[initialMatrix]);const handleCellToggle=(ringIndex,diagIndex)=>{const newMatrix=JSON.parse(JSON.stringify(matrix));newMatrix[ringIndex][diagIndex]=newMatrix[ringIndex][diagIndex]===0?2:0;setMatrix(newMatrix);setError('');// Clear any previous error\n// Auto-check validity on each toggle\nif(isValidMatrix(newMatrix)){onSubmit(newMatrix);}};// Get total pews placed\nconst totalPairs=matrix.flat().reduce((sum,val)=>sum+(val===2?1:0),0);const innerRingPairs=matrix[0].reduce((sum,val)=>sum+(val===2?1:0),0);// Determine which image assets to use (passed props or defaults)\nconst keypadBg=customImages===null||customImages===void 0?void 0:customImages.keypadBackground;// Use the prop\nconst unpressedImg=(customImages===null||customImages===void 0?void 0:customImages.unpressedButton)||defaultUnpressedButton;const pressedImg=(customImages===null||customImages===void 0?void 0:customImages.pressedButton)||defaultPressedButton;// Apply keypad background style to the main container\nconst keypadStyle=keypadBg?{backgroundImage:`url(${keypadBg})`}:{};return/*#__PURE__*/_jsxs(\"div\",{className:\"matrix-input\",style:keypadStyle,children:[/*#__PURE__*/_jsx(\"div\",{className:\"matrix-grid\",children:matrix.map((row,ringIndex)=>/*#__PURE__*/_jsx(\"div\",{className:\"matrix-row\",children:row.map((cell,diagIndex)=>{const isPressed=cell===2;const buttonStateImage=isPressed?pressedImg:unpressedImg;return/*#__PURE__*/_jsx(\"button\",{// Apply 'pressed' class for potential CSS targeting\nclassName:`matrix-cell ${isPressed?'pressed':''}`,onClick:()=>handleCellToggle(ringIndex,diagIndex),type:\"button\"// Remove inline background style for buttons\n// style={getButtonStyle(cell === 2)} \n,\"aria-label\":`Toggle pew at ring ${ringIndex+1}, diagonal ${diagIndex+1}`,\"aria-pressed\":isPressed,children:/*#__PURE__*/_jsx(\"img\",{src:buttonStateImage,alt:isPressed?\"Pew Placed\":\"Empty Slot\",className:\"button-state-icon\"})},`cell-${ringIndex}-${diagIndex}`);})},`ring-${ringIndex}`))}),/*#__PURE__*/_jsx(\"div\",{className:\"matrix-status\",children:/*#__PURE__*/_jsx(\"div\",{children:isValidMatrix(matrix)?/*#__PURE__*/_jsx(\"span\",{className:\"valid-config\",children:\"Valid Configuration\"}):/*#__PURE__*/_jsx(\"span\",{className:\"invalid-config\",children:totalPairs===3&&innerRingPairs<=1?\"Arrangement doesn't match church geometry\":`Need ${3-totalPairs} more pair${3-totalPairs!==1?'s':''} ${innerRingPairs>1?'(max 1 on inner ring)':''}`})})}),error&&/*#__PURE__*/_jsx(\"div\",{className:\"error-message\",children:error})]});};export default MatrixInput;","map":{"version":3,"names":["React","useState","useEffect","isValidMatrix","defaultUnpressedButton","defaultPressedButton","jsx","_jsx","jsxs","_jsxs","MatrixInput","_ref","initialMatrix","onSubmit","customImages","matrix","setMatrix","error","setError","Array","isArray","length","handleCellToggle","ringIndex","diagIndex","newMatrix","JSON","parse","stringify","totalPairs","flat","reduce","sum","val","innerRingPairs","keypadBg","keypadBackground","unpressedImg","unpressedButton","pressedImg","pressedButton","keypadStyle","backgroundImage","className","style","children","map","row","cell","isPressed","buttonStateImage","onClick","type","src","alt"],"sources":["C:/ApplicationDev/pope-punk.github.io/src/components/MatrixInput.jsx"],"sourcesContent":["// src/components/MatrixInput.jsx\r\nimport React, { useState, useEffect } from 'react';\r\nimport { isValidMatrix } from '../utils/matrixUtils';\r\n\r\n// ** Import the specific button images **\r\nimport defaultUnpressedButton from '../assets/unpressed-button.png'; // Fallback if not passed\r\nimport defaultPressedButton from '../assets/pressed-button.png'; // Fallback if not passed\r\n\r\nconst MatrixInput = ({ initialMatrix, onSubmit, customImages }) => {\r\n  const [matrix, setMatrix] = useState([\r\n    [0, 0, 0],\r\n    [0, 0, 0],\r\n    [0, 0, 0]\r\n  ]);\r\n  const [error, setError] = useState('');\r\n\r\n  useEffect(() => {\r\n    if (initialMatrix && Array.isArray(initialMatrix) && initialMatrix.length === 3) {\r\n      setMatrix(initialMatrix);\r\n    }\r\n  }, [initialMatrix]);\r\n\r\n  const handleCellToggle = (ringIndex, diagIndex) => {\r\n    const newMatrix = JSON.parse(JSON.stringify(matrix));\r\n    newMatrix[ringIndex][diagIndex] = newMatrix[ringIndex][diagIndex] === 0 ? 2 : 0;\r\n    setMatrix(newMatrix);\r\n    setError(''); // Clear any previous error\r\n\r\n    // Auto-check validity on each toggle\r\n    if (isValidMatrix(newMatrix)) {\r\n      onSubmit(newMatrix);\r\n    }\r\n  };\r\n\r\n  // Get total pews placed\r\n  const totalPairs = matrix.flat().reduce((sum, val) => sum + (val === 2 ? 1 : 0), 0);\r\n  const innerRingPairs = matrix[0].reduce((sum, val) => sum + (val === 2 ? 1 : 0), 0);\r\n\r\n  // Determine which image assets to use (passed props or defaults)\r\n  const keypadBg = customImages?.keypadBackground; // Use the prop\r\n  const unpressedImg = customImages?.unpressedButton || defaultUnpressedButton;\r\n  const pressedImg = customImages?.pressedButton || defaultPressedButton;\r\n\r\n  // Apply keypad background style to the main container\r\n  const keypadStyle = keypadBg ? \r\n    { backgroundImage: `url(${keypadBg})` } : {};\r\n\r\n  return (\r\n    <div className=\"matrix-input\" style={keypadStyle}>\r\n      <div className=\"matrix-grid\">\r\n        {matrix.map((row, ringIndex) => (\r\n          <div key={`ring-${ringIndex}`} className=\"matrix-row\">\r\n            {row.map((cell, diagIndex) => {\r\n              const isPressed = cell === 2;\r\n              const buttonStateImage = isPressed ? pressedImg : unpressedImg;\r\n              \r\n              return (\r\n                <button\r\n                  key={`cell-${ringIndex}-${diagIndex}`}\r\n                  // Apply 'pressed' class for potential CSS targeting\r\n                  className={`matrix-cell ${isPressed ? 'pressed' : ''}`} \r\n                  onClick={() => handleCellToggle(ringIndex, diagIndex)}\r\n                  type=\"button\"\r\n                  // Remove inline background style for buttons\r\n                  // style={getButtonStyle(cell === 2)} \r\n                  aria-label={`Toggle pew at ring ${ringIndex + 1}, diagonal ${diagIndex + 1}`}\r\n                  aria-pressed={isPressed}\r\n                >\r\n                  {/* Display the correct bust icon based on state */}\r\n                  <img \r\n                    src={buttonStateImage} \r\n                    alt={isPressed ? \"Pew Placed\" : \"Empty Slot\"} \r\n                    className=\"button-state-icon\" \r\n                  />\r\n                </button>\r\n              );\r\n            })}\r\n          </div>\r\n        ))}\r\n      </div>\r\n      \r\n      <div className=\"matrix-status\">\r\n        <div>\r\n          {isValidMatrix(matrix) ? \r\n            <span className=\"valid-config\">Valid Configuration</span> : \r\n            <span className=\"invalid-config\">{totalPairs === 3 && innerRingPairs <= 1 ? \r\n              \"Arrangement doesn't match church geometry\" : \r\n              `Need ${3-totalPairs} more pair${3-totalPairs !== 1 ? 's' : ''} ${innerRingPairs > 1 ? '(max 1 on inner ring)' : ''}`}\r\n            </span>\r\n          }\r\n        </div>\r\n      </div>\r\n      \r\n      {error && <div className=\"error-message\">{error}</div>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MatrixInput;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}